#include <cstdio>
#include <iostream>
#include <algorithm>
#include <queue>
int N, L, R;
int map[100][100] = { 0, };
int check[100][100] = { 0, };
using namespace std;
int dx[4] = { 0,0,1,-1 };
int dy[4] = { 1,-1,0,0 };
queue<pair<int, int>>q;

struct POSI {
	int y, x;
};

void create_area(int sy, int sx, int status[][50], int index, int& count, int& sum) {
	int visited[50][50] = { 0, };

	const int dy[] = { 0,0,-1,+1 };
	const int dx[] = { -1,+1,0,0 };
	
	queue<POSI> q;
	POSI head;
	head.y = sy;
	head.x = sx;
	visited[sy][sx] = 1;
	q.push(head);

	while (!q.empty())
	{
		POSI cur = q.front(); q.pop();
		
		status[cur.y][cur.x] = index;
		++count;
		sum += map[cur.y][cur.x];

		for (int dir = 0; dir < 4; ++dir)
		{
			POSI next;
			next.y = cur.y + dy[dir];
			next.x = cur.x + dx[dir];

			if (next.y < 0 || next.y >= N || next.x < 0 || next.x >= N)
			{
				continue;
			}
			int delta = abs(map[cur.y][cur.x] - map[next.y][next.x]);
			if (visited[next.y][next.x] == 0 && L <= delta && delta <= R)
			{
				visited[next.y][next.x] = 1;
				q.push(next);
			}
		}
	}
}

int main()
{
	cin >> N >> L >> R;
	for (int y = 0; y < N; y++)
	{
		for (int x = 0; x < N; x++)
		{
			cin >> map[y][x];
		}
	}
	int ret = 0;
	bool is_update = true;
	while (is_update) {
		is_update = false;


		int status[50][50] = { 0, };
		int area_index = 0;
		int count[25001] = { 0, };
		int sum[25001] = { 0, };

		for (int y = 0; y < N; y++)
		{
			for (int x = 0; x < N; x++)
			{
				if (status[y][x] == 0)
				{
					++area_index;
					create_area(y, x, status, area_index, count[area_index], sum[area_index]);
				}
			}
		}
		for (int y = 0; y < N; y++)
		{
			for (int x = 0; x < N; x++)
			{
				int index = status[y][x];
				int avg = sum[index] / count[index];
				if (map[y][x] != avg)
				{
					map[y][x] = avg;
					is_update = true;
				
				}
			}
		}
		if (is_update)
		{
			++ret;
		}
	}
	cout << ret << endl;
	return 0;
}
